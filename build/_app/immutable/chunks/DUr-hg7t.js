import{A as i}from"./DzLIgThl.js";const h=async o=>{let n=null;const e=await fetch(`${i}/config`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(n=t.detail,null));if(n)throw n;return e},l=async(o,n)=>{let e=null;const t=await fetch(`${i}/config/update`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify({...n})}).then(async a=>{if(!a.ok)throw await a.json();return a.json()}).catch(a=>(e=a.detail,null));if(e)throw e;return t},u=async(o,n)=>{const e=new FormData;e.append("file",n);let t=null;const a=await fetch(`${i}/transcriptions`,{method:"POST",headers:{Accept:"application/json",authorization:`Bearer ${o}`},body:e}).then(async r=>{if(!r.ok)throw await r.json();return r.json()}).catch(r=>(t=r.detail,null));if(t)throw t;return a},d=async(o="",n="alloy",e="",t)=>{let a=null;const r=await fetch(`${i}/speech`,{method:"POST",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},body:JSON.stringify({input:e,voice:n,...t})}).then(async s=>{if(!s.ok)throw await s.json();return s}).catch(s=>(a=s.detail,null));if(a)throw a;return r},p=async(o="")=>{let n=null;const e=await fetch(`${i}/models`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(n=t.detail,null));if(n)throw n;return e},f=async(o="")=>{let n=null;const e=await fetch(`${i}/voices`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(n=t.detail,null));if(n)throw n;return e};export{p as a,f as b,h as g,d as s,u as t,l as u};
//# sourceMappingURL=DUr-hg7t.js.map
