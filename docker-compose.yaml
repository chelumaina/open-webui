services:
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"   # Expose port 80 for HTTP
  #     # - "443:443" # Expose port 443 for HTTPS
  #   networks:
  #     - app-network
  #   volumes:
  #     - ./nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf:ro  # Mount custom Nginx config
  #     - ./nginx/conf.d/logs:/var/log/nginx
  #     - ./nginx/letsencrypt/logs:/var/log/letsencrypt
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #     - ./static:/usr/src/static
  #   restart: always
  #   depends_on:
  #    - open-webui 
  #    - web_server
  #   links:
  #    - open-webui
  #    - web_server
  #   extra_hosts:
  #     - "google.com:142.250.190.78"

  # certbot_app:
  #   container_name: certbot_app
  #   hostname: 'certbot_app'
  #   image: certbot/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   #- ./logs:/var/log/certbot_app
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 48h & wait $${!}; done;'"
  #   depends_on: 
  #     - nginx   
  #   networks:
  #     - app-network
  #   extra_hosts:
  #     - "google.com:142.250.190.78"

  ollama:
    volumes:
      - ./ollama:/root/.ollama
    container_name: ollama
    hostname: ollama
    # pull_policy: always
    # ports:
    #   - 11435:11434
    expose:
      - 11435
    # tty: true
    environment:
      - OLLAMA_NUM_THREADS=8
      - OLLAMA_BATCH_SIZE=32
      - OLLAMA_MEMORY_GB=12
    deploy:
      resources:
        limits:
          memory: 14G
        reservations:
          memory: 12G
    mem_limit: 14g
    ulimits:
      memlock:
        soft: -1
        hard: -1

    restart: unless-stopped
    image: ollama/ollama:latest
    networks:
      - app-network
    extra_hosts:
      # - "host.docker.internal:redis-master"
      - "google.com:142.250.190.78"
  
  otel-collector:
    container_name: otel-collector
    hostname: otel-collector
    image: otel/opentelemetry-collector:0.60.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    # user: root # required for reading docker container logs
    volumes:
      - ./otel-collector-config-app.yaml:/etc/otel-collector-config.yaml
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=host.name=otel-host,os.type=linux
    ports:
      # - "1777:1777"     # pprof extension
      - "4317:4317"     # OTLP gRPC receiver
      - "4318:4318"     # OTLP HTTP receiver
      - "8888:8888"     # OtelCollector internal metrics
      - "8889:8889"     # signoz spanmetrics exposed by the agent
      # - "9411:9411"     # Zipkin port
      - "13133:13133"   # health check extension
      - "14250:14250"   # Jaeger gRPC
      - "14268:14268"   # Jaeger thrift HTTP
      # - "55678:55678"   # OpenCensus receiver
      # - "55679:55679"   # zPages extension
    restart: on-failure
    networks:
      - app-network


  # jaeger:
  #   image: jaegertracing/jaeger:2.3.0
  #   container_name: jaeger
  #   ports:
  #     # - "16686:16686" # Jaeger UI - uses Caddy reverse proxy
  #     - "14317:4317" # OTLP gRPC
  #     - "14318:4318" # OTLP HTTP
  #   volumes:
  #     # - ./jaeger:/jaeger/jaeger_badger_store # Mount the volume for BadgerDB data
  #     # - ./jaeger:/jaeger/jaeger_badger_store_archive # Mount the volume for BadgerDB archive data
  #     # - ./prometheus/web-config.yml:/jaeger # Mount the jaeger directory to make the config files available
  #     - ./otel-collector-config-app.yaml:/etc/otel-collector-config.yaml
  #   command: --config /etc/otel-collector-config.yaml
  #   networks:
  #     - app-network
  #   restart: always 

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    # ports:
    #   - "16686:16686"  # Web UI
    #   - "14251:14250"  # gRPC
    #   - "14269:14268"  # HTTP thrift
    #   - "9412:9411"    # Zipkin compatible
    expose:
      - 14250
      - 16686
      - 14268
      - 9411
    networks:
      - app-network
    restart: always 
    links:
      - otel-collector
    depends_on:
      - otel-collector


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/web-config.yml:/etc/prometheus/auth/web-config.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector
      - jaeger
    links:
      - otel-collector
      - jaeger
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/auth/web-config.yml'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    networks:
      - app-network

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    hostname: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=supersecure123
    volumes:
      - ./data/grafana-storage:/var/lib/grafana
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    networks:
      - app-network
    depends_on:
      - pg_db
    links:
      - pg_db 



  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    build:
      context: .
      dockerfile: Dockerfile 
    # ports:
    #   - "3005:8080"
    expose:
      - 8080
    # command: sh -c "pip3 install geoip2 && sh start.sh"

    volumes:
      # - ./open-webui-data:/app/backend/data
      - ./backend:/app/backend 
      - ./build:/app/build
      - ./CHANGELOG.md:/app/CHANGELOG.md
      - ./package.json:/app/package.json
      - ./.env:/app/.env
      # - ./static:/app/build/static
      # - ./static:/app/backend/open-webui/static
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    networks:
      - app-network
    environment:
      - MODEL_PROVIDER=llmlite
      - LLMLITE_API_URL=http://llmlite:11434
      - OLLAMA_API_URL=http://ollama:11435
    links:
      - pg_db
      - redis-sentinel
      - ollama
      - otel-collector
    depends_on:
      - pg_db
      - redis-sentinel
      - ollama 
      - otel-collector

 
  pg_db:
    container_name: pg_db
    hostname: pg_db
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: transcription
      POSTGRES_PASSWORD: "62Y2xXcDojJ52054"
      POSTGRES_DB: smart_ai_latest
    ports:
      - "5509:5432"
    expose:
      - 5432
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
    #   # - ./logs:/var/log/pg_db
    networks:
      - app-network
    extra_hosts:
      # - "host.docker.internal:host-gateway"
      - "google.com:142.250.190.78"
  
  redis-master:
    image: redis:7
    container_name: redis-master
    hostname: redis-master
    # ports:
    #   - "6379:6379"
    expose:
      - 6379
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./redis/master:/usr/local/etc/redis
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"] 

    extra_hosts:
     - "google.com:142.250.190.78"

  redis-sentinel:
    image: redis:7
    container_name: redis-sentinel
    hostname: redis-sentinel
    depends_on:
      - redis-master
    links:
      - redis-master
    # ports:
    #   - "26379:26379"
    expose:
      - 26379
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./redis/sentinel-data:/usr/local/etc/redis
      # - ./sentinel-data:/data
    command: ["redis-server", "/usr/local/etc/redis/sentinel.conf", "--sentinel"]
    extra_hosts:
      # - "host.docker.internal:host-gateway"
      - "google.com:142.250.190.78"
 


 ##SONIX APPs

  web_server:
    container_name: web_server
    hostname: 'web_server'
    restart: always 
    ports:
      - 8009:8000
    expose:
      - 8000
    build:
      context: ./sonix-clone
      dockerfile: Dockerfile.web 
    image: web_server:latest
    command: 
      # sh -c "python3 manage.py collectstatic --noinput && python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
      sh -c "pip install gunicorn && python3 manage.py collectstatic --noinput && python3 manage.py makemigrations && python3 manage.py migrate && gunicorn snx.wsgi:application --bind 0.0.0.0:8000 --workers 4"

    volumes:
      - ../sonix-clone:/usr/src/app/
      - ../sonix-clone/tmp/web:/tmp
    #- ./logs:/var/log/web_server
    env_file:
      - ../sonix-clone/.env
    networks:
      - app-network
    depends_on:
      - redis_server
      - pg_db_server
    links:
      - redis_server
      - pg_db_server
    extra_hosts:
      - "google.com:142.250.190.78"

  celery_server:
    container_name: celery_server
    hostname: 'celery_server'
    restart: always
    build:
      context: ./sonix-clone
      dockerfile: Dockerfile.celery 
    image: celery_server:latest 
    # mem_limit: 2g  # Set the memory limit to 2 GB (adjust as needed)
    command: sh -c "celery -A snx worker --concurrency=2 -l INFO" 
    volumes:
      - ../sonix-clone:/usr/src/app/
      - ../sonix-clone/tmp/celery:/tmp
    #- ./logs:/var/log/celery_server
    env_file:
      - ../sonix-clone/.env
    networks:
      - app-network
    depends_on:
      - redis_server
      - web_server  
      - pg_db_server 
    links:
      - redis_server
      - web_server
      - pg_db_server
    extra_hosts:
      - "google.com:142.250.190.78"



  pg_db_server:
    container_name: pg_db_server
    hostname: pg_db_server
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: transcription
      POSTGRES_PASSWORD: "6^2Y?2EÂ£ojJ5"
      POSTGRES_DB: smart_ai_latest
    ports:
      - "5503:5432"
    volumes:
      - ../sonix-clone/data/pg:/var/lib/postgresql/data
    #- ./logs:/var/log/pg_db_server
    networks:
      - app-network
    extra_hosts:
      - "google.com:142.250.190.78"



  redis_server:
    image: redis:alpine
    container_name: redis_server
    hostname: redis_server
    restart: always
    command: [
      "redis-server",
      "--requirepass", "s93s1nDwSOdlOna", 
      "--masteruser", "scriber", 
      "--masterauth", "s93s1nDwSOdlOna" 
    ]
    environment:
      - REDIS_USER="scriber"
      - REDIS_PASSWORD="s93s1nDwSOdlOna"
    volumes:
      - ../sonix-clone/data/redis/data:/data
      - ../sonix-clone/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    extra_hosts:
      - "google.com:142.250.190.78"



  flower_server:
    container_name: flower_server
    hostname: flower_server
    restart: always
    image: web_server:latest
    command: sh -c "celery -A snx --broker=redis://:s93s1nDwSOdlOna@redis_server/0 flower --port=5555"
    networks:
      - app-network
    depends_on:
      - redis_server
      - web_server
    links:
      - redis_server
      - web_server
    ports:
      - "5556:5555" 
    environment:
      - CELERY_BROKER_URL=redis://:s93s1nDwSOdlOna@redis_server/0   
      - FLOWER_BASIC_AUTH=admin:admin_password  # Basic auth
    volumes:
      - ../sonix-clone:/usr/src/app/ 
    extra_hosts:
      - "google.com:142.250.190.78"


networks:
  app-network:
    driver: bridge
    external: true
volumes:
  ollama: {}
  open-webui: {}
